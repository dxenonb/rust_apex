class_file = _{ SOI ~ class ~ EOI }

class =
    { annotation*
    ~ class_access_mod? ~ class_def_mod? ~ ^"class" ~ ident
        ~ (^"implements" ~ implements_list)?
        ~ (^"extends" ~ type_name)?
        ~ "{"
        ~ class_body
        ~ "}"
    }

class_access_mod = _{ access_mod }
class_def_mod = @{ ^"abstract" | ^"virtual" | ^"with sharing" | ^"without sharing" }
class_body = _{ class_item* }
class_item = { field | constructor | method | class | inner_enum }

implements_list = { type_name ~ ("," ~ type_name)* }

constructor = { method_modifiers* ~ ident ~ method_args ~ method_body }
method =
    { annotation?
    ~ method_modifiers* ~ type_name ~ ident ~ method_args
        ~ method_body
    }
method_modifiers =
    { access_mod
    | ^"static"
    | ^"testmethod" 
    | ^"webservice"
    }
method_args = { "(" ~ method_args_list? ~ ")" }
method_args_list = { method_arg ~ ("," ~ method_arg)* }
method_arg = { type_name ~ ident }
method_body = { block }

field =
    { annotation?
    ~ field_modifiers* ~ type_name ~ ident
    ~ ((("=" ~ expr)? ~ ";") | field_accessors )
    }
field_modifiers =
    { access_mod
    | ^"static"
    | ^"final"
    | ^"transient"
    }
field_accessors = { "{" ~ getter_setter{, 2} ~ "}" }
getter_setter = { access_mod? ~ (^"get" | ^"set") ~ (";" | ("(" ~ ")")? ~ method_body) }

annotation = { "@" ~ ident ~ annotation_args? }
annotation_args = { "(" ~ annotation_arg ~ annotation_arg* ~ ")" }
annotation_arg = { ident ~ "=" ~ literal }

inner_enum = { access_mod? ~ ^"enum" ~ ident ~ inner_enum_body }
inner_enum_body = { "{" ~ (ident ~ ("," ~ ident)*)? ~ "}" }

access_mod = @{ ^"public" | ^"private" | ^"global" }

block = { "{" ~ statement* ~ "}" }

statement =
    { block
    | statement_if
    | statement_for
    | statement_while
    | statement_try_catch
    | statement_run_as
    | (
        ( statement_do_while
        | statement_return
        | statement_throw
        | statement_dml
        | statement_decl
        | expr
        )?
        ~ ";"
      )
    }
statement_if = { ^"if" ~ "(" ~ expr ~ ")" ~ statement ~ (^"else" ~ statement)? }
statement_for = { ^"for" ~ "(" ~ for_op ~ ")" ~ statement }
statement_while = { while_cond ~ statement }
statement_try_catch = { ^"try" ~ block ~ ^"catch" ~ catch_guard ~ block }
statement_run_as = { ^"system" ~ "." ~ ^"runas" ~ func_args ~ block }
statement_return = { ^"return" ~ expr }
statement_decl = { ^"final"? ~ type_name ~ ident ~ ("=" ~ expr)? }
statement_dml = { ((^"insert" | ^"update" | ^"delete") ~ expr) | upsert }
statement_throw = { ^"throw" ~ expr }
statement_do_while = { ^"do" ~ block ~ while_cond }

catch_guard = { "(" ~ type_name ~ ident ~ ")" }

while_cond = { ^"while" ~ "(" ~ expr ~ ")" }

// TODO: there may be more correct rule to use instead of type_name here
upsert = { ^"upsert" ~ expr ~ type_name? }

for_op = _{ for_iterator | for_c_style }
for_iterator = { type_name ~ ident ~ ":" ~ expr }
for_c_style = { statement_decl ~ ";" ~ expr ~ ";" ~ expr }

expr = { expr_infix ~ expr_ternary? }
expr_ternary = { "?" ~ expr ~ ":" ~ expr }
expr_infix = { expr_unit ~ (expr_op ~ expr_unit)* }
expr_op =
   @{ "+=" | "-=" | "*=" | "/="
    | "+" | "-" | "*" | "/"
    | ">=" | "<=" | "<" | ">"
    | "===" | "!==" | "==" | "!=" | "="
    | "||" | "&&"
    | ^"instanceof"
    }
// TODO: Naming; and inspired by Java grammar, but not sure this gives the right 
// precedence, may need to lift up prefix ops and test how they interact
expr_unit = { type_cast | expr_unary }
expr_unary = { prefix_op* ~ expr_primary ~ trailer* ~ postfix_op* }
expr_primary =
    { literal
    | expr_group
    | expr_new
    | type_class
    | ident
    | soql
    }
expr_group = { "(" ~ expr ~ ")" }
expr_new = { ^"new" ~ type_name ~ type_constructor_args }

prefix_op = { "++" | "--" | "!" | "-" }
postfix_op = { "++" | "--" }
type_cast = { "(" ~ type_name ~ ")" ~ expr_unit }

type_constructor_args =
    { list_initializer
    | map_initializer
    | sobject_field_args
    | func_args
    }

list_initializer = { "{" ~ list_init_args? ~ "}" }
list_init_args = { expr ~ ("," ~ expr)* }

map_initializer = { "{" ~ map_init_args? ~ "}" }
map_init_args = { map_init_arg ~ ("," ~ map_init_arg)* }
map_init_arg = { expr ~ "=>" ~ expr }

// TODO: naming... this represents for example: "new Account(Name = 'Foo')";
sobject_field_args = { "(" ~ sobject_field_args_list? ~ ")" }
sobject_field_args_list =
    { "("
    ~ sobject_field_arg
    ~ ("," ~ sobject_field_args)*
    ~ ")"
    }
sobject_field_arg = { ident ~ "=" ~ expr }

type_name =
    { !keyword
    ~ type_path ~ type_args? ~ ("." ~ ^"class")? ~ ("[" ~ "]")? }
type_class = { type_path ~ type_args? ~ "." ~ ^"class" }
type_args = { "<" ~ type_name ~ ("," ~ type_name)* ~ ">" }
type_path = { ident ~ ("." ~ ident)* }

// Borrowed "trailer" idea from Python grammar
trailer = { func_args | el_access | ("." ~ ident) }
func_args = { "(" ~ func_args_list? ~ ")" }
func_args_list = { expr ~ ("," ~ expr)* }
el_access = { "[" ~ expr? ~ "]"}
ident = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
literal = @{ ((^"null" | ^"true" | ^"false") ~ !ident_continuation) | string | num }
ident_continuation = { (ASCII_ALPHANUMERIC | "_")+ }
num = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT* )? ~ "L"? }
string = { "'" ~ (raw_string | escape)* ~ "'" }
escape = { "\\" ~ ANY }
raw_string = { (!("\\" | "'") ~ ANY)+ }

// only keywords that disrupt declaration parsing
keyword =
    {
        ( ^"null"
        | ^"true"
        | ^"false"
        | ^"new"
        | ^"instanceof"
        )
    }

// TODO: very TODO!
soql = @{ "[" ~ raw_soql ~ (soql ~ raw_soql?)* ~ "]" }
raw_soql = { (!("]" | "[") ~ ANY)* }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ comment }

comment = { line_comment | block_comment }

line_comment = { "//" ~ (!(NEWLINE) ~ ANY)* ~ NEWLINE }
block_comment = { "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
